pipeline{
    agent any
    tools {
        maven 'MAVEN'
    }
    environment {
        APP_NAME = "backend-service"
        RELEASE = "1.0.0"
        DOCKER_USER = "luongquoctay87"
        DOCKER_PASS = 'Dockerhub'
        IMAGE_NAME = "${DOCKER_USER}" + "/" + "${APP_NAME}"
        IMAGE_TAG = "${RELEASE}-${BUILD_NUMBER}"
        JENKINS_API_TOKEN = credentials('JENKINS_API_TOKEN')
    }
    stages {
        stage ('Clean workspace') {
            steps {
                cleanWs()
            }
        }

        stage("Checkout from SCM"){
            steps {
                git branch: 'master', credentialsId: 'GitHub', url: 'https://github.com/luongquoctay87/backend-service'
            }
        }

        stage("Build Application"){
            steps {
                sh "mvn clean package"
            }
        }

        stage("Test Application"){
            steps {
                sh "mvn test"
            }
        }

        stage("Sonarqube Analysis") {
            steps {
                script {
                    withSonarQubeEnv(credentialsId: 'sonarQube') {
                        sh "mvn sonar:sonar"
                    }
                }
            }
        }

        stage("Quality Gate") {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonarQube'
                }
            }
        }

        stage("Build & Push Docker Image") {
            steps {
                script {
                    withCredentials([string(credentialsId: 'Dockerhub', variable: 'dockerhub_pwd')]) {
                        docker_image = docker.build "${IMAGE_NAME}"
                        docker_image.push("${IMAGE_TAG}")
                        docker_image.push('latest')
                    }
                }
            }
        }

        stage("Trivy Scan") {
            steps {
                script {
		            sh ('docker run -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image ${IMAGE_NAME}:latest --no-progress --scanners vuln  --exit-code 0 --severity HIGH,CRITICAL --format table')
                }
            }
        }

        stage("Trigger CD Pipeline") {
            steps {
                script {
                    sh "curl -v -k --user jenkins:${JENKINS_API_TOKEN} -X POST -H 'cache-control: no-cache' -H 'content-type: application/x-www-form-urlencoded' --data 'IMAGE_TAG=${IMAGE_TAG}' 'http://127.0.0.1:8080/job/auth-service-cd/buildWithParameters?token=gitops-token'"
                }
            }
        }

        stage("Cleanup Artifacts") {
            steps {
                script {
		            sh "docker rmi ${IMAGE_NAME}:${IMAGE_TAG}"
                    sh "docker rmi ${IMAGE_NAME}:latest"
                }
            }
        }
    }

    // Note: Need to setting Email Notification in Jenkins-lts
    // post {
    //     failure {
    //         emailext body: '''${SCRIPT, template="groovy-html.template"}''',
    //                 subject: "${env.JOB_NAME} - Build # ${env.BUILD_NUMBER} - Failed",
    //                 mimeType: 'text/html',to: "luongquoctay87@gmail.com"
    //         }
    //      success {
    //           emailext body: '''${SCRIPT, template="groovy-html.template"}''',
    //                 subject: "${env.JOB_NAME} - Build # ${env.BUILD_NUMBER} - Successful",
    //                 mimeType: 'text/html',to: "luongquoctay87@gmail.com"
    //       }
    // }
}