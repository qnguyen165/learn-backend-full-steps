pipeline {
    agent any
    tools {
        maven 'maven'
    }
    environment {
        APP_NAME = "backend-service"
        RELEASE = "1.0.0"
        DOCKER_USER = "qnguyenxdev"
        DOCKER_PASS = 'Dockerhub'
        IMAGE_NAME = "${DOCKER_USER}" + "/" + "${APP_NAME}"
        IMAGE_TAG = "${RELEASE}-${BUILD_NUMBER}"
        // JENKINS_API_TOKEN = credentials('JENKINS_API_TOKEN')
    }

    stages {
        stage ('Clean workspace') {
            steps {
                cleanWs()
            }
        }

        stage("Checkout from SCM"){
            steps {
                git branch: 'master', credentialsId: 'GitHub', url: 'https://github.com/qnguyen165/learn-backend-full-steps'
            }
        }

        stage("Test Application"){
            steps {
                dir('backend-service') {
                  sh 'mvn test -Ptest'
                }
            }
        }

        stage("Sonarqube Analysis") {
            steps {
                script {
                    withSonarQubeEnv(credentialsId: 'sonarQube') {
                        dir('backend-service') {
                          sh "mvn sonar:sonar"
                        }
                    }
                }
            }
        }

        // stage("Quality Gate") {
        //     steps {
        //         script {
        //             waitForQualityGate abortPipeline: false, credentialsId: 'sonarQube'
        //         }
        //     }
        // }

        stage("Build & Push Docker Image") {
             steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'Dockerhub', usernameVariable: 'DOCKERHUB_USER', passwordVariable: 'DOCKERHUB_PASS')]) {
                        docker.withRegistry("https://index.docker.io/v1/", "Dockerhub") {
                            docker_image = docker.build("${IMAGE_NAME}", "-f backend-service/Dockerfile backend-service")
                            docker_image.push("${IMAGE_TAG}")
                            docker_image.push('latest')
                        }
                    }
                }
             }
        }

        stage("Trivy Scan") {
            steps {
                script {
		            sh ('docker run -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image ${IMAGE_NAME}:latest --no-progress --scanners vuln  --exit-code 0 --severity HIGH,CRITICAL --format table')
                }
            }
        }
    }
}


