services:
#  mysql:
#    image: mysql:8.0
#    container_name: mysql
#    cap_add:
#      - SYS_NICE
#    restart: always
#    environment:
#      - MYSQL_DATABASE=testdb
#      - MYSQL_ROOT_PASSWORD=password
#    ports:
#      - '3306:3306'
#    volumes:
#      - mysql_data:/var/lib/mysql
#      - ./initdb.sql:/docker-entrypoint-initdb.d/initdb.sql
#    networks:
#      - default

  postgres:
    image: postgres:latest
    container_name: bs_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: qnguyen
      POSTGRES_PASSWORD: secret
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
      - ./initdb.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - '5434:5432'
    networks:
      - default

  backend-service:
    container_name: backend-service
    image: qnguyenxdev/backend-service:20250414
    #    build:
#      context: ./
#      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      POSTGRES_URL: jdbc:postgresql://host.docker.internal:5434/backend_service
      POSTGRES_USERNAME: qnguyen
      POSTGRES_PASSWORD: secret
      LOGSTASH_HOST: host.docker.internal:5600
    networks:
      - default

  elasticsearch:
    image: elasticsearch:7.14.1
    container_name: bs_elasticsearch
    restart: always
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
    networks:
      - default

  kibana:
    image: kibana:7.14.1
    container_name: bs_kibana
    restart: always
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - default

  logstash:
    image: logstash:7.14.1
    container_name: bs_logstash
    restart: always
    ports:
      - "5600:5600" # Socket port
      - "5044:5044"
    #      - "9600:9600"
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    environment:
      - XPACK_MONITORING_ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - XPACK_MONITORING_ENABLED=true
    networks:
      - default

  prometheus:
    image: prom/prometheus
    container_name: bs_prometheus
    restart: unless-stopped
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - '9090:9090'

  grafana:
    image: grafana/grafana
    container_name: bs_grafana
    restart: unless-stopped
    environment: # account: grafana/password
      - GF_SECURITY_ADMIN_USER=qnguyen
      - GF_SECURITY_ADMIN_PASSWORD=secret
    ports:
      - '3000:3000'
    links:
      - prometheus
    volumes:
      - grafana:/var/lib/grafana

  jenkins:
    # image: jenkins/jenkins:latest-jdk21
    build:
      context: .
      dockerfile: Dockerfile.jenkins
    container_name: bs_jenkins
    privileged: true
    user: root
    ports:
      - '7080:8080'
      - '50000:50000'
    volumes:
        #  This mounts the Jenkins home directory to a local directory on the host machine.
      - ~/jenkins-data:/var/jenkins_home
        #  This allows Jenkins to run Docker commands inside the container. It mounts the Docker socket from the host into the container.
      - /var/run/docker.sock:/var/run/docker.sock
        #  This allows Jenkins to use the Docker CLI installed on the host.
      # - /usr/local/bin/docker:/usr/local/bin/docker
    networks:
      - bridge

  sonarqube:
    image: sonarqube:community
    container_name: bs_sonarqube
    ports:
      - "9000:9000"
    environment:
      SONAR_JDBC_USERNAME: qnguyen
      SONAR_JDBC_PASSWORD: secret
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    networks:
      - bridge

networks:
  bridge:
    driver: bridge
  default:
    name: backend-service

volumes:
  mysql_data:
  postgres:
  grafana:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs: